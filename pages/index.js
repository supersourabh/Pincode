import Head from 'next/head'
import Link from 'next/link'
import Router from "next/router"
import { useState } from 'react'
import { Alert, Button, Card, Spinner, Toast } from 'react-bootstrap'
import Header from '../components/head'

export default function Home(props) {

    const handler = (item) => {
        Router.push(`/view/${item}`)
    }
    const [search, setSearch] = useState()
    const [loading, setLoading] = useState()
    const [error, setError] = useState(null)
    const [data, setData] = useState([])


    const get = async (e) => {
        setLoading(true)
        setError(null)
        const res = await fetch(`https://api.postalpincode.in/postoffice/${search}`).catch(err => setError(err))
        if (res) {
            const fetchdata = await res.json()
            console.log(fetchdata);
            setLoading(false)
            return setData(fetchdata)
        }
        setLoading(false)
        return null

    }

    return (
        <div className='top' >
            <Head >
                <title>Search PostOffice </title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Header />


            <main className='main' >
                <div className='search' style={ { width: 350 } }>
                    <input type="text" placeholder="Search your Place " value={ search } onChange={ (e) => setSearch(e.target.value) } />
                    <Button varient="success" onClick={ (e) => get(e) } >Search</Button>
                </div>

                {
                    loading ? <Spinner variant="success" animation="border" /> :
                        error !== null ?
                            <Toast show={ error } style={ { backgroundColor: "#fcf" } } >
                                <Toast.Header closeButton={ false }>
                                    <strong className="me-auto">Error</strong>
                                </Toast.Header>
                                <Toast.Body>{ error.message }</Toast.Body>
                            </Toast> : null
                }
                {
                    data.map(x => x.Status === "Success" ? <h2 style={ { fontWeight: "bold", color: "#cfaa94", border: 1, borderStyle: "solid", width: 350, padding: 5, borderRadius: 10 } } >Results found : { x.PostOffice.length } </h2> : null)
                }
                {

                    data.map(x =>
                        x.Status === "Error" ?
                            <Alert variant="danger" className="card-body" >{ x.Message }</Alert>
                            :

                            x.PostOffice.map((item , ind) =>

                                <Card key={ ind } style={ { width: 350, marginBottom: 10 } } >
                                    <Card.Body >
                                        <Card.Header style={ { height: "20%", backgroundColor: "transperent" } }>
                                            <h1 style={ { color: "#927148", fontWeight: "bold" } }  >{ item.Name }</h1>
                                            <h3 style={ { color: "#947771cc", fontWeight: "bold" } } >PINCODE : { item.Pincode }</h3>
                                        </Card.Header>
                                        <Card.Text style={ { display: "flex", textAligh: "center", height: "25%", textOverflow: "ellipsis", flexDirection: "row" } } >
                                            <b>Branch: </b><text>  { item.BranchType }{ "(" }{ item.Circle }{ ")" }</text>
                                        </Card.Text>
                                        <Card.Text style={ { display: "flex", textAligh: "center", height: "25%", textOverflow: "ellipsis", flexDirection: "row" } } >
                                            <b>State (circle) : </b><text>  { item.State }{ "(" }{ item.Circle }{ ")" }</text>
                                        </Card.Text>
                                        <Card.Text style={ { display: "flex", textAligh: "center", height: "25%", textOverflow: "ellipsis", flexDirection: "row" } } >
                                            <b> District : </b><text>  { item.District }</text>
                                        </Card.Text>
                                        <Card.Text style={ { display: "flex", textAligh: "center", height: "25%", textOverflow: "ellipsis", flexDirection: "row" } } >
                                            <b> Division : </b><text>  { item.Division }</text>
                                        </Card.Text>
                                        <Card.Text style={ { display: "flex", textAligh: "center", height: "25%", textOverflow: "ellipsis", flexDirection: "row" } } >
                                            <b>Region: </b><text>  { item.Region }</text>
                                        </Card.Text>
                                        <Card.Text style={ { display: "flex", textAligh: "center", height: "25%", textOverflow: "ellipsis", flexDirection: "row" } } >
                                            <b>Delivery-Status : </b><text>{ item.DeliveryStatus }</text>
                                        </Card.Text>
                                        <Button className="btn btn-success" onClick={ (e) => handler(item.Pincode) } > View  Post Offices of { item.Pincode } </Button>
                                    </Card.Body>

                                </Card>
                            ))
                }

            </main>


        </div >
    )
}




